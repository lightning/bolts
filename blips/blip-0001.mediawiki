<pre>
bLIP: 1
Title: bLIP process
Status: Active
Type: Process
Author: Ryan Gentry <ryan@lightning.engineering>, *ideally plus one person from each client team*
Created: 2021-05-21
License: BSD-2-Clause, OPL
</pre>

==Abstract==

bLIP stands for Bitcoin Lightning Improvement Proposal. A bLIP is a design document providing information to the Lightning community, or describing a new feature for the Lightning Network or its processes or environment. The bLIP should provide a concise technical specification of the feature and a rationale for the feature. The bLIP author is responsible for building consensus within the community and documenting dissenting opinions.

==Copyright==

This bLIP is dual-licensed under the Open Publication License and BSD 2-clause license.

==Rationale==

As the Lightning community has grown, new features, standards, and protocols have been developed outside of the BOLT specification process: particularly at the application, forwarding, and routing level that isn’t described within the core BOLT documents. This is great! But in the spirit of interoperability, documenting features, standards, and protocols in a single location with a standard format will make it easy on future adopters. 

bLIPs will serve as the primary mechanism for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into the Lightning Network. Hopefully, they will provide an avenue for developers to quickly get feedback on their ideas outside of the main BOLT process. Because the bLIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

For Lightning developers, bLIPs are a convenient way to track the progress of their implementation. Ideally, each implementation editor would list the bLIPs they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.

==bLIP Types==

There are three kinds of bLIPs:

* A Standards Track bLIP describes any change that affects most or all Lightning implementations, such as—a change to the network protocol, a change in HTLC types or funding transaction rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Lightning. Standards Track bLIPs consist of three parts—a design document, an implementation, and (if warranted) an update to the Basics of Lightning Technology (BOLT) specification. Furthermore, Standards Track bLIPs can be broken down into the following categories:
** Core: improvements requiring changes to the BOLTs, as well as changes that are not necessarily critical but may be relevant to “protocol dev” discussions, and routing node strategy changes.
** Routing/Pathfinding: includes improvements around the routing protocol, as well as proposed improvements to the onion routing protocol specification ([https://github.com/lightningnetwork/lightning-rfc/blob/master/04-onion-routing.md BOLT #4]).
** Networking: includes improvements around the gossip protocol, as well as proposed improvements to network protocol specifications ([https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md BOLT #7]).
** Lightning Request for Comments (LRC): application-level standards and conventions.
* A Process bLIP describes a process surrounding Lightning, or proposes a change to (or an event in) a process. Process bLIPs are like Standards Track bLIPs but apply to areas other than the Lightning protocol itself. They may propose an implementation, but not to the BOLT specification; they often require community consensus; unlike Informational bLIPs, they are more than recommendations, and users are strongly encouraged to adopt them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Lightning development. Any meta-bLIP is also considered a Process bLIP.
* An Informational bLIP describes a Lightning design issue, or provides general guidelines or information to the Lightning community, but does not propose a new feature. Informational bLIPs do not necessarily represent a Bitcoin community consensus or recommendation, so users and implementers are free to ignore Informational bLIPs or follow their advice.

It is highly recommended that a single bLIP contain a single key proposal or new idea. More focused bLIPs will tend to be more successful. If in doubt, a bLIP should be split into several well-focused ones.

A change that affects multiple clients, or defines a standard for multiple apps to use, requires a bLIP, but a change to one client does not.

==bLIP Workflow==

The bLIP process begins with a new idea for Lightning. Each potential bLIP must have a champion -- someone who writes the bLIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The bLIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is bLIP-able. The first step should be to search past discussions to see if an idea has been considered before, and if so, what issues arose in its progression. Such discussion generally happens on the [https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev Lightning development mailing list], or in the ##lightning-dev IRC channel.

Once the champion has asked the Lightning community as to whether an idea has any chance of acceptance, a draft bLIP should be presented to the [https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev Lightning development mailing list]. This gives the author a chance to flesh out the draft bLIP to make it properly formatted, of high quality, and to address additional concerns about the proposal. Following a discussion, the proposal should be submitted to the [https://github.com/lightningnetwork/lightning-rfc bLIP folder of the lightning-rfc repository] as a pull request. This draft must be written in bLIP style as described below, and its bLIP number will be the PR number automatically assigned by Github (or, if preferred by the author, the Issue # if there was discussion in the Issues section of this repository about this bLIP).

When the bLIP draft is complete, the lightning-rfc editors will label it as Standards Track, Informational, or Process, and merge the pull request into the proposals folder in the lightning-rfc repository. The editors will not unreasonably reject a bLIP. Reasons for rejecting bLIPs include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Bitcoin and Lightning Network philosophy. For a bLIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

The bLIP author may update the draft as necessary in the git repository. Updates to drafts should also be submitted by the author as pull requests.

====Transferring bLIP Ownership====

It occasionally becomes necessary to transfer ownership of bLIPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred bLIP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the bLIP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the bLIP. We try to build consensus around a bLIP, but if that's not possible, you can always submit a competing bLIP.

If you are interested in assuming ownership of a bLIP, send a message asking to take over, addressed to both the original author and the bLIP editor. If the original author doesn't respond to email in a timely manner, the bLIP editor will make a unilateral decision (it's not like such decisions can't be reversed).

====bLIP Editors====

The current bLIP editors are:

* ACINQ volunteer?
* c-lightning volunteer?
* lnd volunteer?
* rust-lightning volunteer?
* ideally would add some app layer volunteers too*

====bLIP Editor Responsibilities & Workflow====

For each new bLIP submission, the editors do the following:

* Read the bLIP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to get to final status.
* The title should accurately describe the content.
* The bLIP draft must have been sent to the lightning-dev mailing list for discussion.
* Motivation and backward compatibility (when applicable) must be addressed.
* Licensing terms must be acceptable for bLIPs.

If the bLIP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the bLIP is ready for the repository, the bLIP editor will:

* Assign a bLIP number (generally the PR number or, if preferred by the author, the Issue # if there was discussion in the Issues section of this repository about this bLIP)
* Merge the corresponding pull request
* Send a message back to the bLIP author with the next steps.

The bLIP editors are intended to fulfill administrative and editorial responsibilities. They do not pass judgement on bLIPs. The bLIP editors monitor bLIP changes, and update bLIP headers as appropriate.

==What belongs in a successful bLIP?==

bLIPs should be written in mediawiki format.

Each bLIP should have the following parts:

* Preamble -- Headers containing metadata about the bLIP (see below).
* Abstract -- A short (~200 word) description of the technical issue being addressed.
* Copyright -- The bLIP must be explicitly licensed under acceptable copyright terms (see below).
* Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Lightning implementations.
* Motivation -- The motivation is critical for bLIPs that want to change the Lightning protocol. It should clearly explain why the existing protocol is inadequate to address the problem that the bLIP solves.
* Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
* Backwards compatibility -- All bLIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The bLIP must explain how the author proposes to deal with these incompatibilities.
* Reference implementation -- The reference implementation must be completed before any bLIP is given status "Final", but it need not be completed before the bLIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code. The final implementation must include test code and documentation appropriate for the Lightning protocol.

====bLIP Header Preamble====

Each bLIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
bLIP: bLIP number, this is determined by the bLIP editor
Title: bLIP title
Author: list of the author's or authors' name(s) and/or username(s), or name(s) and email(s). Details are below.
* Discussions-To: a url pointing to the official discussions thread
Status: Draft, Active, Proposed, Deferred, Rejected, Withdrawn, Final, Replaced, Obsolete
Type: Standards Track, Informational, Process
Category: Core, Networking, Routing, Interface, or LRC (fill out for Standards Track bLIPs only)
Created: date created on, in ISO 8601 (yyyy-mm-dd) format
* Post-History: dates of postings to lightning-dev mailing list, or link to thread in mailing list archive
  License: abbreviation for approved license(s)
* License-Code: abbreviation for code under different approved license(s)
* Requires: bLIP number(s)
* Replaces: bLIP number
* Superseded-By: bLIP number
</pre>

The Category header (only for Standards Track bLIPs) documents which aspect of Lightning the bLIP applies to.

The Author header lists the names and email addresses of all the authors/owners of the bLIP. The format of the Author header value must be:

  Random J. User <address@dom.ain>

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

While a bLIP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the bLIP is being discussed. No Discussions-To header is necessary if the bLIP is being discussed privately with the author, or on the bitcoin email mailing lists.

The Type header specifies the type of bLIP: Standards Track, Informational, or Process.

The Created header records the date that the bLIP was assigned a number, while Post-History is used to record when new versions of the bLIP are posted to bitcoin mailing lists. Dates should be in yyyy-mm-dd format, e.g. 2001-08-14. Post-History is permitted to be a link to a specific thread in a mailing list archive.

bLIPs may have a Requires header, indicating the bLIP numbers that this bLIP depends on.

bLIPs may also have a Superseded-By header indicating that a bLIP has been rendered obsolete by a later document; the value is the number of the bLIP that replaces the current document. The newer bLIP must have a Replaces header containing the number of the bLIP that it rendered obsolete.

====bLIP status field====

The typical paths of the status of bLIPs are as follows:

flowchart.img

* Draft - The first formally tracked stage of a bLIP in development. A bLIP is merged by a bLIP Editor into the proposals folder of the lightning-rfc repository when properly formatted.

* Deferred - The bLIP editor may also change the status to Deferred when no progress is being made on the bLIP.

* Withdrawn - Champions of a bLIP may decide on their own to change the status between Draft, Deferred, or Withdrawn.

* Rejected - bLIPs should be changed from Draft status to Rejected status, upon request by any person, if they have not made progress in three years. Such a bLIP may be changed to Draft status if the champion provides revisions that meaningfully address public criticism of the proposal, or to Proposed status if it meets the criteria required as described in the previous paragraph.

* Proposed - a bLIP may only change status from Draft (or Rejected) to Proposed, when the author deems it is complete, has a working implementation (where applicable), and has community plans to progress it to the Final status.

* Final / Active - a Proposed bLIP may progress to Final only when specific criteria reflecting real-world adoption has occurred. This is different for each bLIP depending on the nature of its proposed changes, which will be expanded on below. Evaluation of this status change should be objectively verifiable, and/or be discussed on the development mailing list. A process bLIP may change status from Draft to Active when it achieves rough consensus on the mailing list. Such a proposal is said to have rough consensus if it has been open to discussion on the development mailing list for at least one month, and no person maintains any unaddressed substantiated objections to it. Addressed or obstructive objections may be ignored/overruled by general agreement that they have been sufficiently addressed, but clear reasoning must be given in such circumstances.

* Replaced or Obsolete - when a Final bLIP is no longer relevant, its status may be changed to Replaced or Obsolete (which is equivalent to Replaced). This change must also be objectively verifiable and/or discussed.

====Auxiliary Files====

bLIPs may include auxiliary files such as diagrams. Auxiliary files should be included in a subdirectory for that bLIP, or must be named bLIP-XXXX-Y.ext, where "XXXX" is the bLIP number, "Y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==Licensing==

New bLIPs may be accepted with the following licenses. Each new bLIP must identify at least one acceptable license in its preamble. The License header in the preamble must be placed after the Created header. Each license must be referenced by their respective abbreviation given below.

For example, a preamble might include the following License header:
 
   License: BSD-2-Clause
             GNU-All-Permissive

In this case, the bLIP text is fully licensed under both the OSI-approved BSD 2-clause license as well as the GNU All-Permissive License, and anyone may modify and redistribute the text provided they comply with the terms of *either* license. In other words, the license list is an "OR choice", not an "AND also" requirement.

It is also possible to license source code differently from the bLIP text. An optional License-Code header is placed after the License header. Again, each license must be referenced by their respective abbreviation given below.

For example, a preamble specifying the optional License-Code header might look like:
 
   License: BSD-2-Clause
             GNU-All-Permissive
   License-Code: GPL-2.0+

In this case, the code in the bLIP is not available under the BSD or All-Permissive licenses, but only under the terms of the GNU General Public License (GPL), version 2 or newer. If the code were to be available under *only* version 2 exactly, the "+" symbol should be removed from the license abbreviation. For a later version (eg, GPL 3.0), you would increase the version number (and retain or remove the "+" depending on intent).
 
   License-Code: GPL-2.0   # This refers to GPL v2.0 *only*, no later license versions are acceptable.
   License-Code: GPL-2.0+  # This refers to GPL v2.0 *or later*.
   License-Code: GPL-3.0   # This refers to GPL v3.0 *only*, no later license versions are acceptable.
   License-Code: GPL-3.0+  # This refers to GPL v3.0 *or later*.

In the event that the licensing for the text or code is too complicated to express with a simple list of alternatives, the list should instead be replaced with the single term "Complex". In all cases, details of the licensing terms must be provided in the Copyright section of the bLIP.

bLIPs are not required to be *exclusively* licensed under approved terms, and may also be licensed under unacceptable licenses *in addition to* at least one acceptable license. In this case, only the acceptable license(s) should be listed in the License and License-Code headers.

====Recommended licenses====

* BSD-2-Clause: [https://opensource.org/licenses/BSD-2-Clause OSI-approved BSD 2-clause license]
* BSD-3-Clause: [https://opensource.org/licenses/BSD-3-Clause OSI-approved BSD 3-clause license]
* CC0-1.0: [https://creativecommons.org/publicdomain/zero/1.0/ Creative Commons CC0 1.0 Universal]
* GNU-All-Permissive: [http://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html GNU All-Permissive License]

In addition, it is recommended that literal code included in the bLIP be dual-licensed under the same license terms as the project it modifies. For example, literal code intended for a Lightning client would ideally be dual-licensed under the MIT license terms as well as one of the above with the rest of the bLIP text.

====Not recommended, but acceptable licenses====

* Apache-2.0: [http://www.apache.org/licenses/LICENSE-2.0 Apache License, version 2.0]
* BSL-1.0: [http://www.boost.org/LICENSE_1_0.txt Boost Software License, version 1.0]
* CC-BY-4.0: [https://creativecommons.org/licenses/by/4.0/ Creative Commons Attribution 4.0 International]
* CC-BY-SA-4.0: [https://creativecommons.org/licenses/by-sa/4.0/ Creative Commons Attribution-ShareAlike 4.0 International]
* MIT: [https://opensource.org/licenses/MIT Expat/MIT/X11 license]
* AGPL-3.0+: [http://www.gnu.org/licenses/agpl-3.0.en.html GNU Affero General Public License (AGPL), version 3 or newer]
* FDL-1.3: [http://www.gnu.org/licenses/fdl-1.3.en.html GNU Free Documentation License, version 1.3]
* GPL-2.0+: [http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html GNU General Public License (GPL), version 2 or newer]
* LGPL-2.1+: [http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html GNU Lesser General Public License (LGPL), version 2.1 or newer]

====Not acceptable licenses====

All licenses not explicitly included in the above lists are not acceptable terms for a Bitcoin Lightning Improvement Proposal unless a later bLIP extends this one to add them. However, bLIPs predating the acceptance of this bLIP were allowed under other terms, and should use these abbreviation when no other license is granted:

* OPL: [http://opencontent.org/openpub/ Open Publication License, version 1.0]
* PD: Released into the public domain

====Rationale====

Why is OPL insufficient?
* The OPL is generally regarded as obsolete, and not a license suitable for new publications. 
Many are unfamiliar with the OPL terms, and may just prefer to use the public domain rather than license under uncertain terms. 
* The OPL license terms allowed for the author to prevent publication and derived works, which was widely considered inappropriate for Bitcoin standards. 
* Public domain is not universally recognised as a legitimate action, thus it is inadvisable.

Why are there software licenses included?
* Some bLIPs may include literal code in the bLIP itself which may not be available under the exact license terms of the bLIP.
* Despite this, not all software licenses would be acceptable for content included in bLIPs.

Why is Public Domain no longer acceptable for new bLIPs?
* In some jurisdictions, public domain is not recognised as a legitimate legal action, leaving the bLIP simply copyrighted with no redistribution or modification allowed at all.

==History==

This document was derived heavily from [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki Bitcoin's BIP-0002] written by Luke Jr. which in turn was derived from [https://www.python.org/dev/peps/ Python's PEP-0001]. In many places text was simply copied and modified. Although the PEP-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the Bitcoin Lightning Improvement Process, and should not be bothered with technical questions specific to the Lightning Network or the bLIP. Please direct all comments to the bLIP editors.
